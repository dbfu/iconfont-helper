<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>iconfont</title>
  <style>
    body.vscode-dark {
      background-color: #282c34;
    }

    body.vscode-light {
      background-color: #fafafa;
    }

    .list {
      list-style: none;
      margin: 0;
      padding: 0;
      overflow: hidden;
    }

    .list li {
      position: relative;
      float: left;
      width: 16.66%;
      height: 100px;
      margin: 3px 0;
      padding: 10px 0 0;
      overflow: hidden;
      text-align: center;
      list-style: none;
      background-color: inherit;
      border-radius: 4px;
      cursor: pointer;
      transition: color .3s ease-in-out, background-color .3s ease-in-out;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .vscode-dark li {
      color: #fff;
    }

    .vscode-light li {
      color: #555;
    }

    .text {
      font-size: 14px;
      margin-top: 14px;
    }

    .anticon {
      display: inline-block;
      color: inherit;
      font-style: normal;
      line-height: 0;
      text-align: center;
      text-transform: none;
      vertical-align: -.125em;
      text-rendering: optimizeLegibility;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      transition: transform .3s ease-in-out;
      font-size: 36px;
    }

    .list li:hover {
      background-color: #5867dd;
      color: #fff;
    }

    .list li:hover .anticon {
      transform: scale(1.4);
      color: #fff;
    }

    .nav {
      display: flex;
      list-style: none;
      flex-wrap: wrap;
      padding-left: 0;
      justify-content: center;
      font-size: 15px;
    }

    .nav-link {
      color: #6ea8fe;
      display: block;
      padding: 0.5em 1em;
      text-decoration: none;
      transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out;
      cursor: pointer;
      border-radius: 0.375rem;
    }

    .nav-link:hover {
      color: #9ec5fe;
    }

    .nav-link.active {
      color: #fff;
      background-color: #0d6efd;
    }
  </style>
  <style>
    .loader {
      position: absolute;
      top: 50%;
      left: 40%;
      margin-left: 10%;
      transform: translate3d(-50%, -50%, 0);
    }

    .dot {
      width: 24px;
      height: 24px;
      background: #3ac;
      border-radius: 100%;
      display: inline-block;
      animation: slide 1s infinite;
    }

    .dot:nth-child(1) {
      animation-delay: 0.1s;
      background: #32aacc;
    }

    .dot:nth-child(2) {
      animation-delay: 0.2s;
      background: #64aacc;
    }

    .dot:nth-child(3) {
      animation-delay: 0.3s;
      background: #96aacc;
    }

    .dot:nth-child(4) {
      animation-delay: 0.4s;
      background: #c8aacc;
    }

    .dot:nth-child(5) {
      animation-delay: 0.5s;
      background: #faaacc;
    }

    @-moz-keyframes slide {
      0% {
        transform: scale(1);
      }

      50% {
        opacity: 0.3;
        transform: scale(2);
      }

      100% {
        transform: scale(1);
      }
    }

    @-webkit-keyframes slide {
      0% {
        transform: scale(1);
      }

      50% {
        opacity: 0.3;
        transform: scale(2);
      }

      100% {
        transform: scale(1);
      }
    }

    @-o-keyframes slide {
      0% {
        transform: scale(1);
      }

      50% {
        opacity: 0.3;
        transform: scale(2);
      }

      100% {
        transform: scale(1);
      }
    }

    @keyframes slide {
      0% {
        transform: scale(1);
      }

      50% {
        opacity: 0.3;
        transform: scale(2);
      }

      100% {
        transform: scale(1);
      }
    }
  </style>
  <style>
    .search-box {
      position: fixed;
      top: 15px;
      right: 10px;
      display: flex;
      gap: 12px;
      height: 36px;
      align-items: center;
      z-index: 1;
    }

    .vscode-dark input {
      background-color: rgb(33, 37, 43);
      border-color: #424242;
      color: rgba(255, 255, 255, 0.85);
      box-shadow: 0 0 0 2px rgba(0, 60, 180, 0.15);
    }

    .vscode-light input {
      background-color: #fff;
      border-color: #d9d9d9;
    }

    input {
      box-sizing: border-box;
      margin: 0;
      padding: 4px 11px;
      color: rgba(0, 0, 0, .88);
      font-size: 14px;
      line-height: 1.5714285714285714;
      list-style: none;
      font-family: -apple-system, BlinkMacSystemFont, segoe ui, Roboto, helvetica neue, Arial, noto sans, sans-serif, apple color emoji, segoe ui emoji, segoe ui symbol, noto color emoji;
      position: relative;
      display: inline-block;
      width: 100%;
      min-width: 0;
      background-image: none;
      border-width: 1px;
      border-style: solid;
      border-radius: 6px;
      transition: all .2s;
    }

    input:hover {
      border-color: #4096ff;
      border-inline-end-width: 1px;
    }

    input:active {
      border-color: #4096ff;
      border-inline-end-width: 1px;
    }

    input:focus {
      outline: none;
      border-color: #4096ff;
      border-inline-end-width: 1px;
    }


    .btn {
      outline: none;
      position: relative;
      display: inline-block;
      font-weight: 400;
      white-space: nowrap;
      text-align: center;
      background-image: none;
      background-color: transparent;
      border: 1px solid transparent;
      cursor: pointer;
      transition: all .2s cubic-bezier(.645, .045, .355, 1);
      user-select: none;
      touch-action: manipulation;
      line-height: 1.5714285714285714;
      color: rgba(0, 0, 0, .88);
      font-size: 14px;
      height: 32px;
      padding: 4px 15px;
      border-radius: 6px;
      color: #fff;
      background-color: #1677ff;
      box-shadow: 0 2px 0 rgba(5, 145, 255, .1);
    }
  </style>
</head>

<body>
  <div class="search-box">
    <input />
    <button class="btn refresh">刷新</button>
  </div>
  <ul class="nav">
    <li>
      <a id="local-link" class="nav-link active">本地</a>
    </li>
    <li>
      <a id="antd-link" class="nav-link">antd</a>
    </li>
    <li>
      <a id="project-link" class="nav-link">我的项目</a>
    </li>
    <li>
      <a id="favorite-link" class="nav-link">我的收藏</a>
    </li>
  </ul>
  <ul class="list">
    <% localIcons.forEach(function(item) { %>
      <li id="icon_<%= item.id %>">
        <div>
          <span class="anticon svg">
            <%- item.svgContent %>
          </span>
          <div class="text">
            <%= item.name %>
          </div>
        </div>
      </li>
      <% }) %>
  </ul>
  <div style="display: none;" class="loader">
    <div class="dot"></div>
    <div class="dot"></div>
    <div class="dot"></div>
    <div class="dot"></div>
    <div class="dot"></div>
  </div>
  <script>
    const vscode = acquireVsCodeApi();
    const loading = document.querySelector('.loader');

    window.localIcons = <%- JSON.stringify(localIcons) %>;

    function sendMessage(data) {
      vscode.postMessage(data);
    }

    function showLoading() {
      renderList([]);
      window.isLoading = true;
      loading.style.display = 'block';
    }

    function hiddenLoading() {
      window.isLoading = false;
      loading.style.display = 'none';
    }

    window.addEventListener('message', e => {
      if (window.active === 'project') {
        window.projectIcons = e.data;
      } else if (window.active === 'favorite') {
        window.favoriteIcons = e.data;
      } else if (window.active === 'antd') {
        window.antdIcons = e.data;
      }

      hiddenLoading();
      renderList(e.data);
    })

  </script>
  <script>
    const projectLink = document.querySelector('#project-link');
    const favoriteLink = document.querySelector('#favorite-link');
    const localLink = document.querySelector('#local-link');
    const antdLink = document.querySelector('#antd-link');
    const refreshBtn = document.querySelector('.refresh');
    const input = document.querySelector('input');

    const list = document.querySelector('.list');

    window.active = 'local';

    function renderList(icons) {
      list.innerHTML = icons.map(item => {
        return `<li id="icon_${item.id}">
        <div>
          <span class="anticon svg">
            ${item.svgContent}
          </span>
          <div class="text">
            ${item.name}
          </div>
        </div>
      </li>`;
      }).join('\n');
      refresh();
    }

    input.addEventListener('input', (e) => {
      const value = e.target.value;
      console.log(value)
      if (window.active === 'favorite') {
        renderList(value ? window.favoriteIcons.filter(o => o.name.includes(value)) : window.favoriteIcons);
      } else if (window.active === 'project') {
        renderList(value ? window.projectIcons.filter(o => o.name.includes(value)) : window.projectIcons);
      } else if (window.active === 'local') {
        renderList(value ? window.localIcons.filter(o => o.code.includes(value)) : window.localIcons);
      } else if (window.active === 'antd') {
        renderList(value ? window.antdIcons.filter(o => o.code.includes(value)) : window.antdIcons);
      }
    })

    refreshBtn.addEventListener('click', () => {
      if (window.active === 'favorite') {
        window.showLoading();
        window.sendMessage({
          type: 'getFavoriteIcons',
        });
      } else if (window.active === 'project') {
        window.showLoading();
        window.sendMessage({
          type: 'getProjectIcons',
        });
      } else if (window.active === 'local') {
        window.showLoading();
        window.sendMessage({
          type: 'getLocalIcons',
        });
      }
    })

    projectLink.addEventListener('click', () => {
      if (window.isLoading) return;

      projectLink.classList.add('active');
      favoriteLink.classList.remove('active');
      localLink.classList.remove('active');
      antdLink.classList.remove('active');

      window.active = 'project';

      if (!window.projectIcons) {
        window.showLoading();
        window.sendMessage({
          type: 'getProjectIcons',
        });
        return;
      }

      renderList(window.projectIcons);

      refresh();
    });

    antdLink.addEventListener('click', () => {
      if (window.isLoading) return;

      antdLink.classList.add('active');
      projectLink.classList.remove('active');
      favoriteLink.classList.remove('active');
      localLink.classList.remove('active');

      window.active = 'antd';

      if (!window.antdIcons) {
        window.showLoading();
        window.sendMessage({
          type: 'getAntdIcons',
        });
        return;
      }

      renderList(window.antdIcons);
    });

    favoriteLink.addEventListener('click', () => {
      if (window.isLoading) return;

      favoriteLink.classList.add('active');
      projectLink.classList.remove('active');
      localLink.classList.remove('active');
      antdLink.classList.remove('active');

      window.active = 'favorite';

      if (!window.favoriteIcons) {
        window.showLoading();
        window.sendMessage({
          type: 'getFavoriteIcons',
        });
        return;
      }

      renderList(window.favoriteIcons);
    });

    localLink.addEventListener('click', () => {

      if (window.isLoading) return;

      favoriteLink.classList.remove('active');
      projectLink.classList.remove('active');
      antdLink.classList.remove('active');
      localLink.classList.add('active');

      window.active = 'local';
      renderList(window.localIcons);
    });
  </script>
  <script>
    function listen() {

      document.querySelector('.list').onclick = e => {
        const paths = e.composedPath();

        const item = paths.find(p => p.nodeName === "LI");

        const span = item.querySelector('span.svg');

        const svg = item.querySelector('svg');

        const pathDoms = svg.querySelectorAll('svg path');

        pathDoms.forEach(p => p.removeAttribute('fill'));

        const styleText = svg.style.cssText;

        const cloneSpan = span.cloneNode(true);

        cloneSpan.querySelector('svg').setAttribute('style', '');
        cloneSpan.querySelector('svg').removeAttribute('class');

        if (item) {
          const id = item.id.replace('icon_', '');
          window.sendMessage({
            type: 'select',
            data: {
              active: window.active,
              icon: {
                id,
                svg: cloneSpan.innerHTML,
                style: styleText,
              }
            },
          })
        }
      }
    }

    function refresh() {
      document.querySelectorAll('path').forEach(p => {
        p.setAttribute('fill', 'currentColor');
      });
    }

    refresh();
    listen();
  </script>
</body>

</html>